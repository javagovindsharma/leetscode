// JAVA CODE

    static HashMap<String,Integer> mm;
    static List<String> a;
    static void nikaldo(char ans[]){
        int i=0,j=ans.length-1;
        for(i=ans.length-2;i>=0;i--){
            if(ans[i]<ans[i+1])break;
        }
        if(i<0)return;
        for(int k=ans.length-1;k>i;k--){
            if(ans[k]>ans[i]){
                j=k;
                break;
            }
        }
        char temp=ans[i];
        ans[i]=ans[j];
        ans[j]=temp;
        i++;
        j=ans.length-1;
        while(i<j){
            temp=ans[i];
            ans[i]=ans[j];
            ans[j]=temp;
            i++;
            j--;
        }
        String t = String.valueOf(ans);
        if(mm.get(t)==null)a.add(t);
        mm.putIfAbsent(t,0);
        mm.put(t,mm.get(t)+1);
    }
    public List<String> find_permutation(String S) {
        // Code here
        mm = new HashMap<>();
        a = new ArrayList<>();
        int n = S.length();
        char arr[] = S.toCharArray();
        Arrays.sort(arr);
        a.add(String.valueOf(arr));
        mm.put(String.valueOf(arr),1);
        int k = 1;
        for(int i=2;i<=n;i++)k*=i;
        k--;
        while(k!=0){
        nikaldo(arr);
        k--;
        }
        return a;
    }
    
// C++ CODE

	    void nikaldo(string &s,vector<string> &ans,unordered_map<string,int> &mm){
	        int i=0,j=s.length()-1;
	        for(i=s.length()-2;i>=0;i--){
	            if(s[i]<s[i+1])break;
	        }
	        if(i<0)return;
	        for(int k=s.length()-1;k>i;k--){
	            if(s[k]>s[i]){
	                j=k;
	                break;
	            }
	        }
	        swap(s[i],s[j]);
	        i++;
	        j=s.length()-1;
	        while(i<j){
	            swap(s[i],s[j]);
	            i++;
	            j--;
	        }
	        mm[s]++;
	        if(mm[s]==1)ans.push_back(s);
	    }
		vector<string>find_permutation(string S)
		{
		    // Code here there
		    sort(S.begin(),S.end());
		    vector<string> ans;
		    ans.push_back(S);
		    unordered_map<string,int> mm;
		    mm[S]++;
		    int fact = 1;
		    for(int i=2;i<=S.length();i++)fact*=i;
		    fact--;
		    while(fact--){
		        nikaldo(S,ans,mm);
		    }
		    return ans;
		}
