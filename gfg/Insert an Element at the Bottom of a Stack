// C++ CODE

    stack<int> insertAtBottom(stack<int> st,int x){
        stack<int> temp;
        while(st.size()){
            temp.push(st.top());
            st.pop();
        }
        st.push(x);
        while(temp.size()){
            st.push(temp.top());
            temp.pop();
        }
        return st;
    }

// JAVA CODE

    public Stack<Integer> insertAtBottom(Stack<Integer> st, int x) {
        Stack<Integer> temp = new Stack<>();
        while(!st.isEmpty()){
            temp.push(st.peek());
            st.pop();
        }
        st.push(x);
        while(!temp.isEmpty()){
            st.push(temp.peek());
            temp.pop();
        }
        return st;
    }


// Time Complexity:- O(N)
// Space Complexity:- O(N)
