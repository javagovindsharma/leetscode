// C++ CODE

    int mod = 1e9+7;
    int help(string a,string b,int i,int j,vector<vector<int>> &dp){
        if(j==b.length())return 1;
        if(i==a.length())return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        int x=0,y=0;
        if(a[i]==b[j])x=help(a,b,i+1,j+1,dp);
        y=help(a,b,i+1,j,dp);
        return dp[i][j] = (x+y)%mod;
    }
    int countWays(string s1, string s2) {
        // code here
        vector<vector<int>> dp(s1.length(),vector<int> (s2.length(),-1));
        return help(s1,s2,0,0,dp);
    }

// JAVA CODE

    static int mod=1000000007;
    static int help(String a,String b,int i,int j,int dp[][]){
        if(j==b.length())return 1;
        if(i==a.length())return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        int x=0,y=0;
        if(a.charAt(i)==b.charAt(j))x = help(a,b,i+1,j+1,dp);
        y = help(a,b,i+1,j,dp);
        return dp[i][j] = (x+y)%mod;
    }
    public static int countWays(String s1, String s2) {
        // code here
        int dp[][] = new int[s1.length()][s2.length()];
        for(int temp[]:dp)Arrays.fill(temp,-1);
        return help(s1,s2,0,0,dp);
    }


// Time Complexity:- O(N*M)
// Space Complexity:- O(N*M)
