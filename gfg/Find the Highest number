// C++ CODE

    int findPeakElement(vector<int>& a) 
    {
        // Code here.
        int low=0,high=a.size()-1,mid=-1,n=a.size();
        bool temp1=false,temp2=false,temp3=false;
        while(low<=high){
            mid=(low+high)/2;
            temp1 = mid!=n-1?a[mid]>a[mid+1]:true;
            temp2 = mid!=0?a[mid]>a[mid-1]:true;
            temp3 = mid!=0?a[mid]<a[mid-1]:true;
            if(temp1 && temp2){
                break;
            }
            else if(temp1 && temp3){
                high=mid-1;
            }
            else low=mid+1;
        }
        return a[mid];
    }


// JAVA CODE

    public int findPeakElement(List<Integer> a) {
        // Code here
        int low=0,high=a.size()-1,mid=-1,n=a.size();
        boolean temp1=false,temp2=false,temp3=false;
        while(low<=high)
        {
            mid=(low+high)/2;
            temp1=mid!=n-1?a.get(mid)>a.get(mid+1):true;
            temp2=mid!=0?a.get(mid)>a.get(mid-1):true;
            temp3=mid!=0?a.get(mid)<a.get(mid-1):true;
            if(temp1 && temp2)break;
            else if(temp1 && temp3)high=mid-1;
            else low=mid+1;
        }
        return a.get(mid);
    }

// Time Complexity:- O(Log(N))
// Space Complexity:- O(1)
