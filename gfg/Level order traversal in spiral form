// JAVA CODE

    ArrayList<Integer> findSpiral(Node root) 
    {
        // Your code here
        ArrayList<Integer> ans = new ArrayList<>();
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        boolean b = true;
        while(q.size()!=0){
            int s = q.size();
            ArrayList<Integer> level = new ArrayList<>();
            for(int i=0;i<s;i++){
                Node temp = q.remove();
                level.add(temp.data);
                if(temp.left!=null)q.add(temp.left);
                if(temp.right!=null)q.add(temp.right);
            }
            if(b==true)Collections.reverse(level);
            for(int i=0;i<s;i++)ans.add(level.get(i));
            b=!b;
        }
        return ans;
    }

// C++ CODE

vector<int> findSpiral(Node *root)
{
    //Your code here
    vector<int> ans;
    queue<Node*> q;
    q.push(root);
    bool b=true;
    while(q.size()){
        int s=q.size();
        vector<int> level;
        for(int i=0;i<s;i++){
            Node *temp = q.front();
            q.pop();
            level.push_back(temp->data);
            if(temp->left)q.push(temp->left);
            if(temp->right)q.push(temp->right);
        }
        if(b==true)reverse(level.begin(),level.end());
        for(auto x:level)ans.push_back(x);
        b=!b;
    }
    return ans;
}
