// C++ CODE

    int isTree(int n, int m, vector<vector<int>> &adj) {
        // code here
        vector<int> adjj[n];
        for(auto x:adj){
            adjj[x[0]].push_back(x[1]);
            adjj[x[1]].push_back(x[0]);
        }
        vector<int> vis(n,0);
        queue<pair<int,int>> q;
        q.push({0,-1});
        vis[0]=1;
        while(q.size()){
            auto temp = q.front();
            q.pop();
            for(auto it:adjj[temp.first]){
                if(!vis[it]){
                    vis[it]=1;
                    q.push({it,temp.first});
                }
                else{
                    if(it!=temp.second)return 0;
                }
            }
        }
        for(int i=0;i<n;i++)if(!vis[i])return 0;
        return 1;
    }


// JAVA CODE

    public boolean isTree(int n, int m, ArrayList<ArrayList<Integer>> edges) 
    {
        // code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<n;i++)adj.add(new ArrayList<>());
        for(ArrayList<Integer> x:edges){
            adj.get(x.get(0)).add(x.get(1));
            adj.get(x.get(1)).add(x.get(0));
        }
        int vis[]=new int[n];
        Arrays.fill(vis,0);
        Queue<int[]> q = new LinkedList<>();
        int arr[]=new int[2];
        arr[0]=0;
        arr[1]=-1;
        q.add(arr);
        vis[0]=1;
        while(!q.isEmpty()){
            int temp[] = q.poll();
            for(int it:adj.get(temp[0])){
                if(vis[it]==0){
                    vis[it]=1;
                    int arr2[]=new int[2];
                    arr2[0]=it;
                    arr2[1]=temp[0];
                    q.add(arr2);
                }
                else{
                    if(it!=temp[1])return false;
                }
            }
        }
        for(int i=0;i<n;i++)if(vis[i]==0)return false;
        return true;
    }
