// C++ CODE

    int findClosest( int n, int k,int arr[]) 
    { 
        // Complete the function
        int low=0,high=n-1,mid=0,mn=INT_MAX,ans=-1;
        while(low<=high){
            mid=(low+high)/2;
            int diff = abs(arr[mid]-k);
            ans = diff<=mn?(diff==mn?ans=max(arr[mid],ans):ans=arr[mid]):ans;
            mn=min(mn,diff);
            if(arr[mid]<=k)low=mid+1;
            else high=mid-1;
        }
        return ans;
    } 

// JAVA CODE

    public static int findClosest(int n, int k, int[] arr) {
        // code here
        int low=0,high=n-1,mid=0,mn=Integer.MAX_VALUE,ans=-1;
        while(low<=high){
            mid=(low+high)/2;
            int diff = Math.abs(arr[mid]-k);
            if(diff<=mn){
                if(diff==mn)ans=Math.max(ans,arr[mid]);
                else ans=arr[mid];
                mn=diff;
            }
            if(arr[mid]<=k)low=mid+1;
            else high=mid-1;
        }
        return ans;
    }

// Time Complexity:- O(Log(N))
// Space Complexity:- O(1)
