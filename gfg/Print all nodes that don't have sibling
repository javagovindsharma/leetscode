// C++ CODE

void help(Node *root,vector<int> &ans){
    if(!root)return;
    if(root->left==NULL or root->right==NULL){
        if(root->left)ans.push_back(root->left->data);
        if(root->right)ans.push_back(root->right->data);
    }
    help(root->left,ans);
    help(root->right,ans);
}
vector<int> noSibling(Node* node)
{
    // code here
    vector<int> ans;
    help(node,ans);
    sort(ans.begin(),ans.end());
    if(ans.size()==0)return {-1};
    return ans;
}

// JAVA CODE

    void help(Node root,ArrayList<Integer> ans){
        if(root==null)return;
        if(root.left==null || root.right==null){
            if(root.left!=null)ans.add(root.left.data);
            if(root.right!=null)ans.add(root.right.data);
        }
        help(root.left,ans);
        help(root.right,ans);
    }
    ArrayList<Integer> noSibling(Node node)
    {
        // code here
        ArrayList<Integer> ans = new ArrayList<>();
        help(node,ans);
        Collections.sort(ans);
        if(ans.size()==0)ans.add(-1);
        return ans;
    }


// Time Complexity:- O(NLogN)
// Space Complexity:- O(N)
