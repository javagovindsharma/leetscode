// JAVA CODE

    public static int distributeTicket(int N,int K)
    {
        int step = N/K;
        int left = step/2;
        int right = left;
        if(step%2==1)left++;
        int i = K*left;
        int j = N+1-K*right;
        if(step%2==1){
            if(N%K==0)return i;
            return i+1;
        }
        if(N%K==0)return j;
        return j-1;
    }

// C++ CODE

    int distributeTicket(int N, int K) {
        // code here
        int step = N/K;
        int left = step/2;
        int right = left;
        if(step%2==1)left++;
        int i = K*left;
        int j = N+1-K*right;
        if(step%2==1){
            if(N%K==0)return i;
            return i+1;
        }
        if(N%K==0)return j;
        return j-1;
    }

Brute Approach

// JAVA CODE

    public static int distributeTicket(int N,int K)
    {
        int i=1,j=N,ans=0;
        boolean a=false;
        while(i<=j){
            if(a==false){
                i+=K;
                ans=j;
            }
            else{
                j-=K;
                ans=i;
            }
            a=!a;
        }
        return ans;
    }
    
    
// C++ CODE

    int distributeTicket(int N, int K) {
        // code here
        int i=1,j=N,ans;
        bool a=false;
        while(i<=j){
            if(!a){
                i+=K;
                ans=j;
            }
            else{
                j-=K;
                ans=i;
            }
            a=!a;
        }
        return ans;
    }
